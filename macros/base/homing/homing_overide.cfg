# Homing Override for dockable probe
[homing_override]
axes: xyz
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set homing_zhop = printer["gcode_macro _USER_VARIABLES"].homing_zhop|float %}
    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed * 60 %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    _CHECK_PROBE action=query

    # reset parameters
    {% set X, Y, Z = False, False, False %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set X, Y, Z = True, True, True %}

    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _HOMING_VARIABLES reset=1
         {% endif %}

    {% endif %}

    _ENTRY_POINT FUNCTION=homing_override
    BED_MESH_CLEAR
    G90

    {% if Z %}
        {% if ('z' in printer.toolhead.homed_axes) %}
            {% if (printer.toolhead.position.z < homing_zhop) %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP") }
                {% endif %}
                G0 Z{homing_zhop} F{z_drop_speed}
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("Z not homed, forcing full G28") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{homing_zhop} F{z_drop_speed}
            {% set X, Y, Z = True, True, True %}
        {% endif %}
    {% endif %}

    # Home x
    {% if X %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        G28 X0
    {% endif %}

    # Home y
    {% if Y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        G28 Y0
    {% endif %}

    # Home z
    {% if Z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}
        _GOTO_Z_PROBE
        G28 Z0
        G0 Z{homing_zhop} F{z_drop_speed}

    {% endif %}
    _CHECK_PROBE action=query

    _EXIT_POINT FUNCTION=homing_override



[gcode_macro _GOTO_Z_PROBE]
description: Move to z probe avoiding the probe dock
gcode:
    {% set min = printer.toolhead.axis_minimum %}
    {% set max = printer.toolhead.axis_maximum %}
    {% set user_park_xy_delta = 45 %}  
    {% set user_park_z_max_delta = 40 %}         ; insure to do not hit cam in front
    {% set user_park_z_min = 10 %}               ; minimal z from bed

    {% set calc_center = {'x': (max.x - min.x) / 2,
                        'y': (max.y - min.y) / 2, 
                        'z': (max.z - min.z) / 2} %}
    {% set calc_park = {'min': {'x': min.x + user_park_xy_delta,
                              'y': min.y + user_park_xy_delta,
                              'z': min.z + user_park_z_min},
                      'max': {'x': max.x - user_park_xy_delta,
                              'y': max.y - user_park_xy_delta,
                              'z': max.z - user_park_z_max_delta}} %}


    {% set park = {
                    'bed'           : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                    'probe'         : {'x': calc_park.max.x, 'y': calc_park.max.y, 'z': calc_park.min.z},
                  } %}

    #{% set park = printer["gcode_macro _USER_VARIABLES"].park %}
    # If the auto z calibration plugin is enabled, then we use the z endstop coordinates set in its config section [z_calibration]
    # Else we fall back on the variable_zendstop_position set in the variables.cfg file
   
    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed|float * 60 %}

    #{% set current_x = printer.toolhead.position.x|float %}
    #{% set current_y = printer.toolhead.position.y|float %}

    SAVE_GCODE_STATE NAME=goto_ZProbe
    G90
    {% set pos = params.P|default('probe')|lower %} 
    {% set cleaned = printer["gcode_macro CLEAN_NOZZLE"].hasrun %}
    {% if cleaned %}
       {% set pos = params.P|default('bed')|lower %} 
    {% endif %}
    G0 X{park[pos].x} Y{park[pos].y} F{homing_travel_speed}
    
    RESTORE_GCODE_STATE NAME=goto_ZProbe

